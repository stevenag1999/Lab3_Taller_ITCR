#include <avr/io.h>
#include <avr/interrupt.h>

int cant_canales = 0;
byte ch1 = 0;
byte ch2 = 0;
byte mux_pins[3] = {A0, A1, A2};  // Pines A, B, C del MUX
int canal1_full = 0;  // Auxiliar para canales simultáneos
byte escala = 0;  // Variable para la escala

volatile bool adc_ready = false;

void setup() {
    Serial.begin(115200);

    // Configuración General del ADC
    ADMUX |= (1 << REFS0); // Voltaje de referencia 5V (REFS1 ya está en 0)
    ADMUX |= (1 << ADLAR); // Ajuste Izquierdo
    ADCSRA |= (1 << ADATE); // Free-running
    ADCSRA |= (1 << ADIE); // habilitar interrupciones del ADC

    // Configuración del Timer1 para una frecuencia de muestreo de 5000 Hz
    TCCR1A = 0;
    TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // Modo CTC, prescaler 64
    OCR1A = 159;  // Valor para obtener una interrupción cada 0.0002 segundos (200 us)
    TIMSK1 |= (1 << OCIE1A); // Habilitar interrupción por comparación A

    // Pines para el control del MUX
    pinMode(mux_pins[0], OUTPUT);
    pinMode(mux_pins[1], OUTPUT);
    pinMode(mux_pins[2], OUTPUT);

    sei(); // Habilita las interrupciones globales
}

void loop() {
    if (Serial.available() > 0) {
        byte comando = Serial.read();
        if (comando == 0b11111110) {
            canal1_full = 0;
        } else if (comando == 0b11111111) {
            canal1_full = 1;
        } else {
            ch1 = comando & 0b00000001;
            ch2 = (comando >> 1) & 0b00000001;
            escala = (comando >> 2) & 0b00000111;  // Bits 2, 3 y 4 para la escala
            if (ch1 == 0 && ch2 == 0) {
                cant_canales = 0;
            } else if ((ch1 == 1 && ch2 == 0) || (ch1 == 0 && ch2 == 1)) {
                cant_canales = 1;
            } else if (ch1 == 1 && ch2 == 1) {
                cant_canales = 2;
            }
        }
    }

    if (adc_ready) {
        adc_ready = false;
        configurarMUX();
        if (cant_canales > 0) {
            ADCSRA |= (1 << ADEN);  // Encender el adc
            ADCSRA |= (1 << ADSC);  // Iniciar la conversión
        } else {
            ADCSRA &= ~(1 << ADEN);  // Apagar el adc
        }
    }
}

void configurarMUX() {
    // Definir las configuraciones del MUX según las escalas seleccionadas
    int config_MUX;

    if (escala == 0) {
        config_MUX = 0b000;
    } else if (escala == 1) {
        config_MUX = 0b001;
    } else if (escala == 2) {
        config_MUX = 0b010;
    } else if (escala == 3) {
        config_MUX = 0b011;
    } else if (escala == 4) {
        config_MUX = 0b100;
    } else if (escala == 5) {
        config_MUX = 0b101;
    } else if (escala == 6) {
        config_MUX = 0b110;
    } else if (escala == 7) {
        config_MUX = 0b111;
    }

    digitalWrite(mux_pins[0], (config_MUX & 0b001) ? HIGH : LOW);
    digitalWrite(mux_pins[1], (config_MUX & 0b010) ? HIGH : LOW);
    digitalWrite(mux_pins[2], (config_MUX & 0b100) ? HIGH : LOW);
}

ISR(TIMER1_COMPA_vect) {
    adc_ready = true;
}

ISR(ADC_vect) {
    int dato = ADCH;
    Serial.println(dato);
}


